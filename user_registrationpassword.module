<?php
/**
 * @file
 * Enables password creation on registration form.
 */

/**
 * No verification email is sent.
 */
define('USER_REGISTRATIONPASSWORD_NO_VERIFICATION', 'none');

/**
 * Verification email is sent before password is set.
 */
define('USER_REGISTRATIONPASSWORD_VERIFICATION_DEFAULT', 'default');

/**
 * Verification email is sent after password is set.
 */
define('USER_REGISTRATIONPASSWORD_VERIFICATION_PASS', 'with-pass');

/**
 * Implements hook_menu().
 */
function user_registrationpassword_menu() {
  $items['user/registrationpassword/%/%/%'] = array(
    'title' => 'Confirm account',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('user_registrationpassword_confirm_account', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'user_registrationpassword.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_registrationpassword_form_user_admin_settings_alter(&$form, &$form_state) {
  $config = config('system.core');
  // Render our configuration options.
  $form['registration_cancellation']['password_registration'] = array(
    '#type' => 'radios',
    '#title' => t('Email verification & password'),
    '#options' => array(
      USER_REGISTRATIONPASSWORD_NO_VERIFICATION => t('Do not require a verification e-mail. Allow people to set a password on the registration form.'),
      USER_REGISTRATIONPASSWORD_VERIFICATION_DEFAULT => t('Require a verification e-mail. Account must be verified before a password may be set.'),
      USER_REGISTRATIONPASSWORD_VERIFICATION_PASS => t('Require a verification e-mail. Allow people to set a password on the registration form.'),
    ),
    '#default_value' => $config->get('password_registration'),
    '#weight' => 6,
  );

  // Render an option to change first time login link behaviour.
  $form['registration_cancellation']['password_registration_ftll_expire'] = array(
    '#type' => 'checkbox',
    '#title' => t('Expire verification links after a period of time'),
    '#description' => t('After the link expires, people will still be able to request a new verification link via the password reset form.'),
    '#default_value' => $config->get('password_registration_ftll_expire'),
    '#weight' => 7,
  );
  // Hide this setting by default.
  $form['registration_cancellation']['ftll_timeout'] = array(
    '#type' => 'container',
    '#weight' => 8,
    '#states' => array(
      'invisible' => array(
        'input[name="password_registration_ftll_expire"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['registration_cancellation']['ftll_timeout']['password_registration_ftll_timeout'] = array(
    '#type' => 'number',
    '#title' => t('New account verification links will exipre in:'),
    '#description' => t('Tip: 86400 seconds is 24 hours.'),
    '#default_value' => $config->get('password_registration_ftll_timeout'),
    '#attributes' => array('placeholder' => '86400'),
    '#field_suffix' => t('seconds'),
    '#weight' => 9,
  );

  // Hide the default option.
  $form['registration_cancellation']['user_email_verification']['#access'] = FALSE;

  // Reorder the form items.
  $form['registration_cancellation']['user_cancel_method']['#weight'] = 10;

  // Register our extra submit function.
  $form['#submit'][] = 'user_registrationpassword_admin_settings_submit';
}

/**
 * Submit handler for the user admin form.
 */
function user_registrationpassword_admin_settings_submit(&$form, &$form_state) {
  // The option we implement.
  $password_registration = $form_state['values']['password_registration'];

  // Core option.
  $user_register = $form_state['values']['user_register'];

  // Test if we are enabled. For this, both options have to be set correctly.
  // @see _user_mail_notify()
  if ($password_registration == USER_REGISTRATIONPASSWORD_VERIFICATION_PASS
      && $user_register == USER_REGISTER_VISITORS) {

    // Disable core verification emails, we are taking over.
    config_set('system.core', 'user_email_verification', FALSE);

    // Prevent standard notification email to administrators and to user.
    $config = config('user.mail');
    $config->set('register_pending_approval_notify', FALSE);
    $config->set('register_no_approval_required_notify', FALSE);
    $config->save();
  }
  // If we are not enabled, set default values.
  else {
    // Our option.
    switch ($password_registration) {
      case USER_REGISTRATIONPASSWORD_NO_VERIFICATION:
        config_set('system.core', 'user_email_verification', FALSE);
        break;

      case USER_REGISTRATIONPASSWORD_VERIFICATION_DEFAULT:
      case USER_REGISTRATIONPASSWORD_VERIFICATION_PASS:
        config_set('system.core', 'user_email_verification', TRUE);
        break;

    }

    // Core option.
    $config = config('user.mail');
    switch ($user_register) {
      case USER_REGISTER_ADMINISTRATORS_ONLY:
        // The register_pending_approval option.
        $config->set('register_pending_approval_notify', FALSE);
        // The no_approval_required option.
        $config->set('register_no_approval_required_notify', FALSE);
        break;

      case USER_REGISTER_VISITORS:
      case USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL:
        // The register_pending_approval option.
        $config->set('register_pending_approval_notify', TRUE);
        // The no_approval_required option.
        $config->set('register_no_approval_required_notify', TRUE);
        break;

    }
    $config->save();
  }

  $config = config('system.core');
  // Save or revert expiration limits variables.
  if ($form_state['values']['password_registration_ftll_expire']) {
    $config->set('password_registration_ftll_expire', $form_state['values']['password_registration_ftll_expire']);
  }
  else {
    $config->clear('password_registration_ftll_expire');
  }

  if ($form_state['values']['password_registration_ftll_timeout'] && $form_state['values']['password_registration_ftll_timeout'] != 86400) {
    $config->set('password_registration_ftll_timeout', $form_state['values']['password_registration_ftll_timeout']);
  }
  else {
    $config->clear('password_registration_ftll_timeout');
  }
  $config->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_registrationpassword_form_user_settings_email_alter(&$form, &$form_state) {
  // Set up available tokens.
  $email_token_help = '';
  if (module_exists('rpt')) {
    // Hide the option to generate passwords, because we
    // only use the token option the rtp module provides.
    $form['registration_cancellation']['rpt_password_generate']['#access'] = FALSE;

    // We support the Registration Password Tokens module.
    // Add a password to a template with [user:password].
    // See http://drupal.org/project/rpt for more information.
    $email_token_help = t('Available variables are: [site:name], [site:url], [user:name], [user:mail], [user:password], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:registrationpassword-url].');
  }
  else {
    $email_token_help = t('Available variables are: [site:name], [site:url], [user:name], [user:mail], [site:login-url], [site:url-brief], [user:edit-url], [user:one-time-login-url], [user:cancel-url], [user:registrationpassword-url].');
  }

  $config = config('user.mail');
  $form['registration_password'] = array(
    '#type' => 'fieldset',
    '#title' => t('Welcome (no approval required, password is set)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('E-mail messages sent to new members upon registering, when no administrator approval is required and password has already been set.') . ' ' . $email_token_help,
    '#group' => 'email',
  );
  $form['registration_password']['password_register_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $config->get('password_register_subject'),
    '#maxlength' => 180,
  );
  $form['registration_password']['password_register_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => $config->get('password_register_body'),
    '#rows' => 15,
  );

  // Add a submit handler to save our config.
  $form['#submit'][] = 'user_registrationpassword_form_user_settings_email_submit';
}

/**
 * Form submission handler for user_settings_email().
 */
function user_registrationpassword_form_user_settings_email_submit($form, &$form_state) {
  $config = config('user.mail');
  $config->set('password_register_subject', $form_state['values']['password_register_subject']);
  $config->set('password_register_body', $form_state['values']['password_register_body']);
  $config->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see user_register_form()
 * @see user_registrationpassword_form_user_register_submit()
 */
function user_registrationpassword_form_user_register_form_alter(&$form, &$form_state) {

  global $user;
  $user_register = config_get('system.core', 'user_register');
  $password_registration = config_get('system.core', 'password_registration');

  // Add the password field from the user_account_form when visitors can
  // register, but require admin approval.
  if ($user_register == USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL
      && $password_registration == USER_REGISTRATIONPASSWORD_VERIFICATION_PASS
      && !$user->uid) {

    $form['account']['pass'] = array(
      '#type' => 'password_confirm',
      '#size' => 25,
      '#required' => TRUE,
    );
  }

  // Prevent this from being run if approval with password on registration
  // form is set and the user is an anonymous user registering to the site.
  // When admin users create a user, this does not need to be executed.
  // And when this also does not need to be executed 'user_register' is not set
  // as 'Visitors can create accounts and no administrator approval is
  // required.' User registers, recieves user_registrationpass email, would
  // not make sense. Cause that will unblock the user Without
  // the admin 'approving'.
  if ($user_register == USER_REGISTER_VISITORS
      && $password_registration == USER_REGISTRATIONPASSWORD_VERIFICATION_PASS
      && !$user->uid) {
    // Set the user account to blocked.
    $form['account']['status']['#default_value'] = 0;
    // Supress any notification.
    $form['account']['notify']['#default_value'] = FALSE;
    // Register our validate and submit handlers.
    $form['#submit'][] = 'user_registrationpassword_form_user_register_submit';
  }
}

/**
 * Implements submission handler for the user registration form.
 *
 * @see user_register_form()
 * @see user_registrationpassword_form_user_register_form_alter()
 */
function user_registrationpassword_form_user_register_submit(&$form, &$form_state) {
  // Define the message we need to remove.
  // Yes, this throws a code style error, but this is in core.
  // See user.module, that string contains a <br />.
  $message = t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.');

  // Unset all messages that contain the $message.
  foreach ($_SESSION['messages']['status'] as $status => $statusmessage) {
    // Test for core message (we need to replace).
    if ($message == $statusmessage) {
      // And unset it if we find it.
      unset($_SESSION['messages']['status'][$status]);
    }
  }
  $_SESSION['messages']['status'] = array_values($_SESSION['messages']['status']);

  // Notify the user.
  $account = $form_state['user'];
  $params['account'] = $account;
  $mail = backdrop_mail('user_registrationpassword', 'register', $account->mail, user_preferred_language($account), $params);

  // Set succes message and redirect to the front page.
  backdrop_set_message(t('A welcome message with further instructions has been sent to your e-mail address.'));
}

/**
 * Implements hook_mail().
 *
 * @see backdrop_mail()
 * @see _user_registrationpassword_mail_text()
 * @see user_registrationpassword_mailkeys()
 * @see user_registrationpassword_mail_edit_text()
 * @see user_registrationpassword_mail_edit_token_types()
 */
function user_registrationpassword_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array('user' => $params['account']);
  $message['subject'] .= _user_registrationpassword_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = _user_registrationpassword_mail_text($key . '_body', $language, $variables);
}

/**
 * Returns a mail string for a variable name.
 *
 * @see user_registrationpassword_mail()
 * @see user_registrationpassword_mail_tokens()
 * @see user_registrationpassword_mailkeys()
 * @see user_registrationpassword_mail_edit_text()
 * @see user_registrationpassword_mail_edit_token_types()
 */
function _user_registrationpassword_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  $langcode = isset($language) ? $language->language : NULL;

  $config = config('user.mail');
  if ($admin_setting = $config->get('user_registrationpassword_' . $key)) {
    // An admin setting overrides the default string.
    $text = $admin_setting;
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'register_subject':
        $text = t('Account details for [user:name] at [site:name]', array(), array('langcode' => $langcode));
        break;

      case 'register_body':
        $text = t("[user:name],

Thank you for registering at [site:name]. You may now log in and verify your account by clicking this link or copying and pasting it to your browser:

[user:registrationpassword-url]

This link can only be used once. You will be able to log in at [site:login-url] in the future using:

username: [user:name]
password: Your password

--  [site:name] team", array(), array('langcode' => $langcode));
        break;
    }
  }

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables,
      array(
        'language' => $language,
        'callback' => 'user_registrationpassword_mail_tokens',
        'sanitize' => FALSE,
        'clear' => TRUE,
      ));
  }

  return $text;
}

/**
 * Token callback to add unsafe tokens for user mails.
 *
 * @see user_mail_tokens()
 * @see user_registrationpassword_mail()
 * @see user_registrationpassword_confirmation_url()
 */
function user_registrationpassword_mail_tokens(&$replacements, $data, $options) {
  user_mail_tokens($replacements, $data, $options);
  if (isset($data['user'])) {
    $replacements['[user:registrationpassword-url]'] = user_registrationpassword_confirmation_url($data['user']);
  }
  // For D7 we use the rpt module to enable emails to contain
  // the user's password, so no need to add the password
  // token here, people just need to install rpt.
}

/**
 * Generates a unique URL for a user to login with their password already set.
 *
 * @param object $account
 *   An object containing the user account.
 *
 * @return string
 *   A unique URL that provides a one-time log in for the user, from which
 *   they can change their password.
 *
 * @see user_registrationpassword_mail_tokens()
 * @see user_pass_rehash()
 */
function user_registrationpassword_confirmation_url($account) {
  $timestamp = REQUEST_TIME;
  return url("user/registrationpassword/$account->uid/$timestamp/" . user_pass_rehash($account->pass, $timestamp, $account->login, $account->uid), array('absolute' => TRUE));
}

/**
 * Implements hook_mailkeys().
 *
 * Returns an array with a simple string to identify the mailkey.
 *
 * @see user_registrationpassword_mail()
 * @see _user_registrationpassword_mail_text()
 * @see user_registrationpassword_mail_tokens()
 * @see user_registrationpassword_mail_edit_text()
 * @see user_registrationpassword_mail_edit_token_types()
 */
function user_registrationpassword_mailkeys() {
  return array(
    'register' => t('Welcome message when user self-registers and sets password during registration'),
  );
}

/**
 * Implements hook_mail_edit_text().
 *
 * Returns an array with subject and body, ready for processing.
 *
 * @see user_registrationpassword_mail()
 * @see _user_registrationpassword_mail_text()
 * @see user_registrationpassword_mail_tokens()
 * @see user_registrationpassword_mailkeys()
 * @see user_registrationpassword_mail_edit_text()
 * @see user_registrationpassword_mail_edit_token_types()
 */
function user_registrationpassword_mail_edit_text($mailkey, $language) {
  $return = array();
  $return['subject'] = _user_registrationpassword_mail_text($mailkey . '_subject', $language, array(), FALSE);
  $return['body'] = _user_registrationpassword_mail_text($mailkey . '_body', $language, array(), FALSE);
  return $return;
}

/**
 * Implements hook_mail_edit_token_types().
 *
 * Returns a simple array for constructing the mail / tokens.
 *
 * @see user_registrationpassword_mail()
 * @see _user_registrationpassword_mail_text()
 * @see user_registrationpassword_mail_tokens()
 * @see user_registrationpassword_mailkeys()
 * @see user_registrationpassword_mail_edit_text()
 */
function user_registrationpassword_mail_edit_token_types($mailkey) {
  return array('user');
}

/**
 * Default callback for user_registrationpassword mail variables.
 */
function user_registrationpassword_variable_mail_default($variable, $options) {
  // Remove 'user_registrationpassword_' prefix.
  $name = substr($variable['name'], 26);
  return _user_registrationpassword_mail_text($name, $options['language']);
}

/**
 * Simple message and redirect.
 */
function user_registrationpassword_set_message($type = 'welcome', $redirect = '') {
  // Select what message to display.
  switch ($type) {
    case 'linkerror':
      backdrop_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));

      // Redirect to user/pass.
      if (!empty($redirect)) {
        backdrop_goto('user/password');
      }
      break;

    case 'welcome':
      backdrop_set_message(t('Further instructions have been sent to your e-mail address.'));
      // Redirect to front.
      if (!empty($redirect)) {
        backdrop_goto();
      }
      break;

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_registrationpassword_form_user_pass_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][0] = '_user_registrationpassword_user_pass_validate';
  $form['#submit'][0] = '_user_registrationpassword_user_pass_submit';
}

/**
 * Form validation function.
 */
function _user_registrationpassword_user_pass_validate(&$form, &$form_state) {
  // We try and load a blocked user that never ever logged in.
  // This should only return 'brand new' user accounts.
  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = user_load_multiple(array(),
    array(
      'mail' => $name,
      'status' => '0',
      'access' => '0',
      'login' => '0',
    )
  );
  $account = reset($users);

  if (!$account) {
    // No success, try to load by name.
    $users = user_load_multiple(array(),
      array(
        'name' => $name,
        'status' => '0',
        'access' => '0',
        'login' => '0',
      )
    );
    $account = reset($users);
  }

  // If the account has never ever been used, load
  // the $account into the form for processing.
  if (!empty($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    module_load_include('inc', 'user', 'user.pages');
    user_pass_validate($form, $form_state);
  }
}

/**
 * Implements submit function.
 */
function _user_registrationpassword_user_pass_submit(&$form, &$form_state) {
  $account = $form_state['values']['account'];

  // Then, if we have a user account
  // and it has never ever been used.
  if (!empty($account->uid) && !$account->login && !$account->access && !$account->status) {

    // Try to load the account in disabled state.
    $users = user_load_multiple(array($account->uid), array(
      'login' => '0',
      'access' => '0',
      'status' => '0',
    ));
    $user = reset($users);

    // If the user never ever logged in, resend the activation mail.
    if (!empty($user)) {
      // Mail one time login URL and instructions using current language.
      $params['account'] = $user;

      // And on success, throw a message.
      if (backdrop_mail('user_registrationpassword', 'register', $user->mail, user_preferred_language($user), $params)) {
        watchdog('user', 'Password reset instructions mailed to %name at %email.', array('%name' => $user->name, '%email' => $user->mail));
        user_registrationpassword_set_message();
      }
    }
  }
  else {
    // If we found no errors execute core submission handler.
    // Obviously cache is disabled on this pages, so this should work.
    if (empty($_SESSION['messages']['error'])) {
      user_pass_submit($form, $form_state);
    }
  }
}

/**
 * Implements hook_mail_debugger_info().
 */
function user_registrationpassword_mail_debugger_info() {
  return array(
    'user_registrationpassword' => array(
      'include' => array(
        'inc',
        'user_registrationpassword',
        'includes/user_registrationpassword.mail_debugger',
      ),
      'title' => 'User Registration Password',
      'form' => '_user_registrationpassword_mail_debugger_form',
      'validate' => '_user_registrationpassword_mail_debugger_form_validate',
      'submit' => '_user_registrationpassword_mail_debugger_form_submit',
      'weight' => -80,
    ),
  );
}
